@{
    ViewData["Title"] = "Select Options";
}
<style>
    p {
        font-family: 'Times New Roman', Times, serif;
        margin-right: 3em;
        vertical-align: middle;
        color: darkgrey;
    }

    label {
        font-family: 'Times New Roman', Times, serif;
        margin-right: 3em;
        vertical-align: middle;
    }

    p1 {
        font-weight: bold;
    }

    form-number {
        width: 20px;
        height: 5px;
        font-size: 20px;
    }
</style>

<h1>Méthodes</h1>

<form id="optionsForm">
    <div class="accordion" id="optionsAccordion">
        <div class="accordion-item">
            <h class="accordion-header" id="headingOption1">
                <div class="d-flex align-items-center">
                    <input class="form-check-input me-2" type="checkbox" id="mainOption1" value="mainOption1">
                    <p1>Analytique</p1>
                </div>
            </h>

        </div>
        <div class="accordion-item">
            <h class="accordion-header" id="headingOption2">
                <div class="d-flex align-items-center">
                    <input class="form-check-input me-2" type="checkbox" id="mainOption2" value="mainOption2">

                    <p1> Random forest</p1>
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOption2" aria-expanded="false" aria-controls="collapseOption2" style="width: 20px; padding: 0; margin-left: 5px;">
                        <span class="visually-hidden">Toggle sub-options</span>
                    </button>

                </div>
            </h>
            <div id="collapseOption2" class="accordion-collapse collapse" aria-labelledby="headingOption2" data-bs-parent="#optionsAccordion">
                <div class="accordion-body">
                    <p>
                        Explication :
                        Le "Random Forest", traduit en français par "Forêt Aléatoire", est un algorithme d'apprentissage automatique faisant partie de la catégorie des méthodes d'ensemble (Ensemble Learning). Il est basé sur la construction d'arbres de décision et est utilisé pour la classification et la régression.
                    </p>
                    <p1>Choose one or more sub-options:</p1>
              
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="n_estimators-checkbox" name="n_estimators" value="n_estimators">
                        <label class="form-check-label" for="n_estimators-checkbox">
                            <p1>1.n_estimators:</p1>
                        </label>
                        <div>
                            <input class="form-number" type="text" id="n_estimators-input" name="n_estimators-input" placeholder="Enter a positive integer between 1 and 100" pattern="\d*" maxlength="3" oninput="this.value = this.value.replace(/\D/g,'')" disabled>

                            <select id="n_estimators-select" class="form-select">
                                <option selected disabled>Select a value</option>
                                <!-- JavaScript generated options will be added here -->
                            </select>
                        </div>
                        <p>
                            Explication :
                            n_estimatorsint, default=100<br>
                            The number of trees in the forest.
                        </p>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="max_depth-checkbox">
                        <label class="form-check-label" for="max_depth-checkbox">
                            <p1>2.max_depth:</p1>
                        </label>
                        <div>
                            <input class="form-number" type="text" id="max_depth-input" name="max_depth-input" placeholder="Enter a positive integer between 1 and 100" pattern="\d*" maxlength="3" oninput="this.value = this.value.replace(/\D/g,'')">

                            <select id="max_depth-select" class="form-select">
                                <option selected disabled>Select a value</option>
                                <!-- JavaScript generated options will be added here -->
                            </select>
                        </div>
                        <label class="form-check-label" for="max_depth-input">
                        </label>
                        <p>
                            Explication :
                            max_depthint, default=None<br>
                            The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.
                        </p>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="min_samples_leaf-checkbox" name="min_samples_leaf" value="min_samples_leaf">
                        <label class="form-check-label" for="min_samples_leaf-checkbox">
                            <p1>3.min_samples_leaf:</p1>
                        </label>
                        <div>
                            <input class="form-number" type="text" id="min_samples_leaf-input" name="min_samples_leaf-input" placeholder="Enter a positive integer between 1 and 100" pattern="\d*" maxlength="3" oninput="this.value = this.value.replace(/\D/g,'')">

                            <select id="min_samples_leaf-select" class="form-select">
                                <option selected disabled>Select a value</option>
                                <!-- JavaScript generated options will be added here -->
                            </select>
                        </div>
                        <p>
                            Explication :
                            min_samples_leafint or float, default=1<br>
                            The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches. This may have the effect of smoothing the model, especially in regression.
                        </p>
                    </div>

                </div>
            </div>
        </div>

        <div class="accordion-item">
            <h class="accordion-header" id="headingOption5">
                <div class="d-flex align-items-center">
                    <input class="form-check-input me-2" type="checkbox" id="mainOption5" value="mainOption5">
                    <p1>SVM</p1>
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOption5" aria-expanded="false" aria-controls="collapseOption5" style="width: 20px; padding: 0; margin-left: 5px;">
                        <span class="visually-hidden">Toggle sub-options</span>
                    </button>
                </div>
            </h>
            <div id="collapseOption5" class="accordion-collapse collapse" aria-labelledby="headingOption5" data-bs-parent="#optionsAccordion">
                <div class="accordion-body">
                    <p>
                        Explication :
                        Le Support Vector Machine (SVM) est un algorithme d'apprentissage supervisé utilisé pour la classification et la régression. Son principe de base est de trouver un hyperplan qui sépare les données en deux catégories de manière à maximiser la marge entre les deux catégories. En classification, l'objectif du SVM est de trouver un hyperplan optimal qui sépare les points de données des différentes classes. En régression, le SVM cherche à maximiser la marge entre les points de données et l'hyperplan, tout en minimisant les écarts des points de données par rapport à l'hyperplan.
                    </p>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="C-checkbox" name="C" value="C">
                        <label class="form-check-label" for="C-checkbox">
                            <p1>1. C:</p1>
                        </label>
                        <div>
                            <input class="form-number" type="text" id="C-input" name="C-input" style="width: 230px;" placeholder="Enter a positive float value" pattern="\d+(\.\d+)?" oninput="this.value = this.value.replace(/[^\d.]/g,'')">
                        </div>
                        <p>
                            Explanation:
                            C: float, default value = 1.0<br>
                            Description: Defines the penalty for the model when it misclassifies. Be careful not to choose too high a value for C to avoid overfitting the model.
                        </p>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="kernel-checkbox" name="kernel" value="kernel">
                        <label class="form-check-label" for="kernel-checkbox">
                            <p1>2. Kernel:</p1>
                        </label>
                        <select id="kernel-select" class="form-select">
                            <option selected disabled>Select a kernel</option>
                            <option value="linear">Linear</option>
                            <option value="poly">Polynomial</option>
                            <option value="rbf">RBF</option>
                            <option value="sigmoid">Sigmoid</option>
                            <option value="precomputed">Precomputed</option>
                        </select>
                        <p>
                            Explanation:
                            Kernel: {‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’} or callable, default=’rbf’<br>
                            Description: Defines the shape of the boundary between the different classes of the model.
                        </p>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="degree-checkbox" name="degree" value="degree">
                        <label class="form-check-label" for="degree-checkbox">
                            <p1>3. Degree:</p1>
                        </label>
                        <input class="form-number" type="number" id="degree-input" name="degree-input" style="width: 200px;" placeholder="Enter a positive integer" min="1" max="10">
                        <p>
                            Explanation:
                            Degree: int, default=3<br>
                            Degree of the polynomial (in the case where kernel = 'poly'). Degree > 0. Ignored if kernel is not 'poly'.
                        </p>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="gamma-checkbox" name="gamma" value="gamma">
                        <label class="form-check-label" for="gamma-checkbox">
                            <p1>4. Gamma:</p1>
                        </label>
                        <select id="gamma-select" class="form-select">
                            <option selected disabled>Select a value</option>
                            <option value="scale">Scale</option>
                            <option value="auto">Auto</option>
                        </select>
                        <p>
                            Explanation:
                            Gamma: {‘scale’, ‘auto’} or float, default value =’scale’<br>
                            Kernel coefficient for ‘rbf’, ‘poly’, and ‘sigmoid’.
                            If gamma='scale', it takes the value 1/(n_features * X.var()).
                            If ‘auto’, it uses 1 / n_features.
                            If float, it must be positive.
                        </p>
                    </div>


                </div>
            </div>
        </div>

        <div class="accordion-item">
            <h class="accordion-header" id="headingOption6">
                <div class="d-flex align-items-center">

                    <input class="form-check-input me-2" type="checkbox" id="mainOption6" value="mainOption6">
                    <p1>KNN</p1>
                </div>
                <p>
                    Explication :                   
            KNN (k-Nearest Neighbors) est un algorithme d'apprentissage supervisé utilisé pour la classification et la régression. Dans le cas de la classification, il attribue une classe à un nouvel exemple en fonction de la classe majoritaire parmi ses k plus proches voisins dans l'espace des caractéristiques. Dans le cas de la régression, il prédit une valeur en faisant la moyenne des valeurs des k plus proches voisins.
            </p>
            </h>

        </div>
    </div>

    <button type="submit" class="btn-upload" id="suivant-btn">Suivant</button>
</form>

@section Scripts {
    <script>
        //max_depth
        // Lorsque la case à cocher est cochée ou décochée, activer/désactiver les champs de saisie et les sélecteurs
        document.getElementById('criterion-max_depth-checkbox').addEventListener('change', function () {
            var input = document.getElementById('criterion-max_depth-input');
            var select = document.getElementById('criterion-max_depth-select');
            input.disabled = !this.checked;
            select.disabled = !this.checked;
            if (this.checked) {
                input.focus(); // Mettre le champ de saisie en surbrillance
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            } else {
                input.value = ''; // Effacer la valeur du champ de saisie
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            }
        });

        // Lorsque le champ de saisie perd le focus, effectuer une validation
        document.getElementById('criterion-max_depth-input').addEventListener('blur', function () {
            var value = parseInt(this.value);
            if (isNaN(value) || value < 1 || value > 100) {
                if (this.value.trim() !== '') {
                    var confirmation = confirm('Veuillez saisir un entier positif entre 1 et 100 pour max_depth.');
                    if (confirmation) {
                        this.value = ''; // Effacer la saisie
                        this.focus(); // Mettre le champ de saisie en surbrillance

                    }
                }
            }
        });

        //n_estimators
        // Lorsque la case à cocher est cochée ou décochée, activer/désactiver les champs de saisie et les sélecteurs
        document.getElementById('criterion-n_estimators-checkbox').addEventListener('change', function () {
            var input = document.getElementById('criterion-n_estimators-input');
            var select = document.getElementById('criterion-n_estimators-select');
            input.disabled = !this.checked;
            select.disabled = !this.checked;
            if (this.checked) {
                input.focus(); // Mettre le champ de saisie en surbrillance
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            } else {
                input.value = ''; // Effacer la valeur du champ de saisie
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            }
        });

        // Lorsque le champ de saisie perd le focus, effectuer une validation
        document.getElementById('criterion-n_estimators-input').addEventListener('blur', function () {
            var value = parseInt(this.value);
            if (isNaN(value) || value < 1 || value > 100) {
                if (this.value.trim() !== '') {
                    var confirmation = confirm('Veuillez saisir un entier positif entre 1 et 100 pour max_depth.');
                    if (confirmation) {
                        this.value = ''; // Effacer la saisie
                        this.focus(); // Mettre le champ de saisie en surbrillance

                    }
                }
            }
        });

        //min_samples_leaf
        // Lorsque la case à cocher est cochée ou décochée, activer/désactiver les champs de saisie et les sélecteurs
        document.getElementById('criterion-min_samples_leaf-checkbox').addEventListener('change', function () {
            var input = document.getElementById('criterion-min_samples_leaf-input');
            var select = document.getElementById('criterion-min_samples_leaf-select');
            input.disabled = !this.checked;
            select.disabled = !this.checked;
            if (this.checked) {
                input.focus(); // Mettre le champ de saisie en surbrillance
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            } else {
                input.value = ''; // Effacer la valeur du champ de saisie
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            }
        });

        // Lorsque le champ de saisie perd le focus, effectuer une validation
        document.getElementById('criterion-min_samples_leaf-input').addEventListener('blur', function () {
            var value = parseInt(this.value);
            if (isNaN(value) || value < 1 || value > 100) {
                if (this.value.trim() !== '') {
                    var confirmation = confirm('Veuillez saisir un entier positif entre 1 et 100 pour max_depth.');
                    if (confirmation) {
                        this.value = ''; // Effacer la saisie
                        this.focus(); // Mettre le champ de saisie en surbrillance

                    }
                }
            }
        });



        // Fonction pour définir la valeur du sélecteur dans le champ de saisie correspondant
        function updateInputFromSelect(selectId, inputId) {
            var select = document.getElementById(selectId);
            var input = document.getElementById(inputId);
            select.addEventListener('change', function () {
                input.value = this.value;
            });

            // Générer les options
            for (var i = 1; i <= 100; i++) {
                var option = document.createElement('option');
                option.value = i;
                option.text = i;
                select.appendChild(option);
            }

            // Ajouter un écouteur d'événements pour mettre à jour la valeur du champ de saisie lorsque l'option du sélecteur change
            select.addEventListener('change', function () {
                var selectedValue = parseInt(this.value);
                input.value = selectedValue;

            });
        }
        // Appeler la fonction pour ajouter la même fonctionnalité à chaque champ de saisie
        updateInputFromSelect('criterion-n_estimators-select', 'criterion-n_estimators-input');
        updateInputFromSelect('criterion-max_depth-select', 'criterion-max_depth-input');
        updateInputFromSelect('criterion-min_samples_leaf-select', 'criterion-min_samples_leaf-input');


       $(document).ready(function () {
            // Activer les sous-options lorsque l'option principale est sélectionnée
            $(' #mainOption2').change(function () {
                var isChecked = $(this).is(':checked');
                var accordionItem = $(this).closest('.accordion-item');

                // Activer ou désactiver les sous-options
                accordionItem.find('input[type=checkbox], input[type=text]').prop('disabled', !isChecked);

                // Déplier ou replier les sous-options
                var collapseTarget = accordionItem.find('.accordion-collapse');
                if (isChecked) {
                    collapseTarget.collapse('show');
                } else {
                    collapseTarget.collapse('hide');
                }
            });

            // Lorsque le bouton est cliqué, effectuer l'action suivante
            $('#nextButton').click(function () {
                // Obtenir les options sélectionnées
                var selectedOptions = [];
                $('input[type=checkbox]:checked').each(function () {
                    selectedOptions.push($(this).val());
                });

                // Obtenir les valeurs personnalisées saisies
                $('input[type=text]').each(function () {
                    var inputValue = $(this).val();
                    if (inputValue !== "" && /^\d+$/.test(inputValue)) {
                        selectedOptions.push(inputValue);
                    }
                });

                // Afficher les options sélectionnées dans la console
                console.log(selectedOptions);

                // Vous pouvez écrire du code ici pour effectuer l'action suivante, comme envoyer les options pour traitement côté serveur, etc.
            });
        });

        // Ajouter un écouteur d'événements pour le clic sur le bouton
        document.getElementById("suivant-btn").addEventListener("click", function (event) {
            // Empêcher le comportement de soumission par défaut du formulaire
            event.preventDefault();
            // Exécuter la logique de redirection de la page, ici utiliser window.location.href pour rediriger vers Home/Select
            window.location.href = "@Url.Action("Image", "Home")";
        });
    </script>
}
