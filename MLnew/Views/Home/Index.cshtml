@{
    ViewData["Title"] = "Home Page";
}


<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <br> </br>
    <form method="post" enctype="multipart/form-data" asp-controller="Home" asp-action="Upload" target="uploadFrame">
        <div>
            <iframe id="uploadFrame" name="uploadFrame" style="display: none;"></iframe>
            <label for="files" class="label-upload">Choisissez les fichiers à télécharger (ZIP autorisés) :</label>
            <input type="file" name="files" multiple>
        </div>
        <br> </br>
        <div>
            <button type="submit" id="okButton" class="btn-upload">OK</button>
        </div>
    </form>
</div>

<form id="optionsForm" class="option-form" method="post" asp-controller="Home" asp-action="ExecuteMachineLearningTasks">
  <div id="optionsSection" style="display:none;">
      <h1 class="text-center mt-5">Méthodes</h1>
     <div class="accordion" id="optionsAccordion">
      <h class="accordion-header" id="headingOption1">
                <div class="d-flex align-items-center">

                    <input class="form-check-input me-2" type="checkbox" id="mainOption1" name="mainOption1" value="true">

                    <p1>Analytique</p1>
                  
                </div>
            </h>
     </div>
        <div class="accordion-item">
            <h class="accordion-header" id="headingOption2">
                <div class="d-flex align-items-center">
                    <input class="form-check-input me-2" type="checkbox" id="mainOption2" name="mainOption2" value="true">

                    <p1> Random forest</p1>
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOption2" aria-expanded="false" aria-controls="collapseOption2" style="width: 20px; padding: 0; margin-left: 5px;">
                        <span class="visually-hidden">Toggle sub-options</span>
                    </button>

                </div>
            </h>
            <div id="collapseOption2" class="accordion-collapse collapse" aria-labelledby="headingOption2" data-bs-parent="#optionsAccordion">
                <div class="accordion-body">
                   <p>
                        Explication :
                        Le "Random Forest", traduit en français par "Forêt Aléatoire", est un algorithme d'apprentissage automatique faisant partie de la catégorie des méthodes d'ensemble (Ensemble Learning). Il est basé sur la construction d'arbres de décision et est utilisé pour la classification et la régression.
                    </p>
                        <p1>Choose one or more sub-options:</p1></br>
                    
                            <p1>1.n_estimators:</p1>
                        <div>
                        <input class="form-number" type="number" id="criterion-n_estimators-input" name="n_est" style="width: 230px;" placeholder="Enter a positive integer value" min="1" max="100" step="1" value="33" required oninput="this.value = this.value.replace(/[^\d.]/g,'')">
                        </div>
                        
                        <p>
                            Explication :
                            n_estimators int, default=33<br>
                            Le nombre d'arbres de décision dans la forêt. Plus il est élevé, plus le modèle aura de la facilité à apprendre.<br />
                            Cependant si la valeur est trop élevé pour les données, le modèle risque d'être surentraîné et de mal se généraliser.
                        </p>
                   
                
                            <p1>2.max_depth:</p1>
                   
                        <div>
                        <input class="form-number" type="number" id="criterion-max_depth-input" name="max_d" placeholder="Enter a positive integer between 1 and 100" value="8" min="1" max="100" step="1" maxlength="3" required oninput="this.value = this.value.replace(/\D/g,'')">

                        </div>
                        <label class="form-check-label" for="criterion-max_depth-input">
                        </label>
                        <p>
                            Explication :
                            max_depthint, default=None<br>
                            The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.
                        </p>
                 

                  
                            <p1>3.min_samples_leaf:</p1>
                     
                        <div>
                        <input class="form-number" type="number" id="criterion-min_samples_leaf-input" name="min_samples" placeholder="Enter a positive integer between 1 and 100" value="1" min="1" max="100" step="1" maxlength="3" required oninput="this.value = this.value.replace(/\D/g,'')">

                           
                        </div>
                        <p>
                            Explication :
                            min_samples_leafint or float, default=1<br>
                            The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches. This may have the effect of smoothing the model, especially in regression.
                        </p>

              
  
                </div>
            </div>
        </div>

      
        <!--Nouveau pour SVM début-->
        <div class="accordion-item">
            <h class="accordion-header" id="headingOption3">
                <div class="d-flex align-items-center">
                    <input class="form-check-input me-2" type="checkbox" id="mainOption3" name="mainOption3" value="true">
                    <p1>SVM</p1>
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOption3" aria-expanded="false" aria-controls="collapseOption3" style="width: 20px; padding: 0; margin-left: 5px;">
                        <span class="visually-hidden">Toggle sub-options</span>
                    </button>
                </div>
            </h>
            <div id="collapseOption3" class="accordion-collapse collapse" aria-labelledby="headingOption3" data-bs-parent="#optionsAccordion">
                <div class="accordion-body">
               

                        <p1>1. C:</p1>

                        <div>
                        <input class="form-number" type="number" id="C-input" name="C_input" style="width: 230px;" placeholder="Enter a positive float value" pattern="\d+(\.\d+)?" value="1.0" required oninput="this.value = parseFloat(this.value).replace(/[^\d.]/g,'')">
                        </div>
                        <p>
                            Explanation:
                            C: float, default value = 1.0<br>
                            Description: Defines the penalty for the model when it misclassifies. Be careful not to choose too high a value for C to avoid overfitting the model.
                        </p>


                        <p1>2. Kernel:</p1>
                        <select id="kernel-select" name="kernel_select" class="form-select">
                            <option value="linear">linear</option>
                            <option value="poly">polynomial</option>
                            <option value="rbf" selected>rbf</option>
                            <option value="sigmoid">sigmoid</option>
                            <option value="precomputed">precomputed</option>
                        </select>
                        <p>
                            Explanation:
                            Kernel: {‘linear’, ‘poly’, ‘rbf’, ‘sigmoid’, ‘precomputed’} or callable, default=’rbf’<br>
                            Description: Defines the shape of the boundary between the different classes of the model.
                        </p>



                        <p1>3. Gamma:</p1>

                        <select id="gamma-select" name="gamma_select" class="form-select">
                            <option value="scale" selected>scale</option>
                            <option value="auto">auto</option>
                        </select>
                        <p>
                            Explanation:
                            Gamma: {‘scale’, ‘auto’} or float, default value =’scale’<br>
                            Kernel coefficient for ‘rbf’, ‘poly’, and ‘sigmoid’.
                            If gamma='scale', it takes the value 1/(n_features * X.var()).
                            If ‘auto’, it uses 1 / n_features.
                            If float, it must be positive.
                        </p>

                </div>
            </div>
        </div>

            <!--Nouveau pour SVM fin-->
        <!--Nouveau pour KNN début-->
        <div class="accordion-item">
            <h class="accordion-header" id="headingOptionKNN">
                <div class="d-flex align-items-center">
                    <input class="form-check-input me-2" type="checkbox" id="mainOption4" name="mainOption4" value="true">
                    <p1>KNN</p1>
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOptionKNN" aria-expanded="false" aria-controls="collapseOptionKNN" style="width: 20px; padding: 0; margin-left: 5px;">
                        <span class="visually-hidden">Toggle sub-options</span>
                    </button>
                </div>
            </h>
            <div id="collapseOptionKNN" class="accordion-collapse collapse" aria-labelledby="headingOptionKNN" data-bs-parent="#optionsAccordion">
                <div class="accordion-body">
                  
                    
                            <p1>1. n_neighbors:</p1>

                    <input class="form-number" type="number" id="n_neighbors-input" name="n_neighbors" value="5" min="1" max="100" required>
                        <p>Number of neighbors to use by default for kneighbors queries.</p>

                            <p1>2. weights:</p1>

                        <select id="weights-select" name="weights" class="form-select">
                            <option value="uniform">uniform</option>
                            <option value="distance">distance</option>
                        </select>
                        <p>Weight function used in prediction.</p>
                  
     
                            <p1>3. metric:</p1>
                 
                        <select id="metric-select" name="metric" class="form-select">
                            <option value="minkowski">minkowski</option>
                            <option value="euclidean">euclidean</option>
                            <option value="manhattan">manhattan</option>
                        </select>
                        <p>Metric to use for distance computation.</p>
                           

                    

                    </div>
                </div>
            </div>

        <br />

        <input type="submit" value="submit" />
        </div>
        <!--Nouveau pour KNN fin-->
       

   

</form>


@section Scripts {
    <script>
        //Script bouton OK
        document.getElementById('okButton').addEventListener('click', function () {
            var optionsSection = document.getElementById('optionsSection');
            if (optionsSection.style.display === "none") {
                optionsSection.style.display = "block";
            } else {
                optionsSection.style.display = "none";
            }
        });

        /*
        //max_depth
        // Lorsque la case à cocher est cochée ou décochée, activer/désactiver les champs de saisie et les sélecteurs
        document.getElementById('criterion-max_depth-checkbox').addEventListener('change', function () {
            var input = document.getElementById('criterion-max_depth-input');
            var select = document.getElementById('criterion-max_depth-select');
            input.disabled = !this.checked;
            select.disabled = !this.checked;
            if (this.checked) {
                input.focus(); // Mettre le champ de saisie en surbrillance
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            } else {
                input.value = ''; // Effacer la valeur du champ de saisie
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            }
        });

        // Lorsque le champ de saisie perd le focus, effectuer une validation
        document.getElementById('criterion-max_depth-input').addEventListener('blur', function () {
            var value = parseInt(this.value);
            if (isNaN(value) || value < 1 || value > 100) {
                if (this.value.trim() !== '') {
                    var confirmation = confirm('Veuillez saisir un entier positif entre 1 et 100 pour max_depth.');
                    if (confirmation) {
                        this.value = ''; // Effacer la saisie
                        this.focus(); // Mettre le champ de saisie en surbrillance

                    }
                }
            }
        });

        //n_estimators
        // Lorsque la case à cocher est cochée ou décochée, activer/désactiver les champs de saisie et les sélecteurs
        document.getElementById('criterion-n_estimators-checkbox').addEventListener('change', function () {
            var input = document.getElementById('criterion-n_estimators-input');
            var select = document.getElementById('criterion-n_estimators-select');
            input.disabled = !this.checked;
            select.disabled = !this.checked;
            if (this.checked) {
                input.focus(); // Mettre le champ de saisie en surbrillance
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            } else {
                input.value = ''; // Effacer la valeur du champ de saisie
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            }
        });

        // Lorsque le champ de saisie perd le focus, effectuer une validation
        document.getElementById('criterion-n_estimators-input').addEventListener('blur', function () {
            var value = parseInt(this.value);
            if (isNaN(value) || value < 1 || value > 100) {
                if (this.value.trim() !== '') {
                    var confirmation = confirm('Veuillez saisir un entier positif entre 1 et 100 pour max_depth.');
                    if (confirmation) {
                        this.value = ''; // Effacer la saisie
                        this.focus(); // Mettre le champ de saisie en surbrillance

                    }
                }
            }
        });

        //min_samples_leaf
        // Lorsque la case à cocher est cochée ou décochée, activer/désactiver les champs de saisie et les sélecteurs
        document.getElementById('criterion-min_samples_leaf-checkbox').addEventListener('change', function () {
            var input = document.getElementById('criterion-min_samples_leaf-input');
         //   var select = document.getElementById('criterion-min_samples_leaf-select');
            input.disabled = !this.checked;
           // select.disabled = !this.checked;
            if (this.checked) {
                input.focus(); // Mettre le champ de saisie en surbrillance
                //select.selectedIndex = 0; // Réinitialiser le sélecteur
            } else {
                input.value = ''; // Effacer la valeur du champ de saisie
               // select.selectedIndex = 0; // Réinitialiser le sélecteur
            }
        });
        // Javascript pour SVM
        // C
        document.getElementById('C-checkbox').addEventListener('change', function () {
            var input = document.getElementById('C-input');
            input.disabled = !this.checked;
            if (this.checked) {
                input.value = '1.0'; // Définir la valeur par défaut lors de l'activation
            } else {
                input.value = ''; // Effacer la valeur du champ de saisie
            }
        });

        // Kernel
        document.getElementById('kernel-checkbox').addEventListener('change', function () {
            var select = document.getElementById('kernel-select');
            select.disabled = !this.checked;
            if (!this.checked) {
                select.selectedIndex = 2; // Réinitialiser le sélecteur
            }
        });

        // Gamma
        document.getElementById('gamma-checkbox').addEventListener('change', function () {
            var select = document.getElementById('gamma-select');
            select.disabled = !this.checked;
            if (!this.checked) {
                select.selectedIndex = 0; // Réinitialiser le sélecteur
            }
        });
        */
        //Javascript pour KNN
        document.getElementById('optionKNN-1').addEventListener('change', function () {
            var input = document.getElementById('n_neighbors-input');
            input.disabled = !this.checked;
            if (this.checked) {
                input.value = '5'; // La valeur par défaut pour n_neighbors
            } else {
                input.value = ''; // Effacer la valeur du champ de saisie
            }
        });

        document.getElementById('optionKNN-2').addEventListener('change', function () {
            var select = document.getElementById('weights-select');
            select.disabled = !this.checked;
            if (!this.checked) {
                select.value = 'uniform'; // Réinitialiser à la valeur par défaut
            }
        });

        document.getElementById('optionKNN-3').addEventListener('change', function () {
            var select = document.getElementById('metric-select');
            select.disabled = !this.checked;
            if (!this.checked) {
                select.value = 'minkowski'; // Réinitialiser à la valeur par défaut
            }
        });

        // Pour gérer le déroulement de l'accordéon
        document.getElementById('mainOptionKNN').addEventListener('change', function () {
            var collapseElement = document.getElementById('collapseOptionKNN');
            var accordionButton = document.querySelector('#headingOptionKNN .accordion-button');

            if (this.checked) {
                // Utiliser Bootstrap Collapse pour montrer les options
                new bootstrap.Collapse(collapseElement, {
                    toggle: true
                });
                accordionButton.classList.remove('collapsed');
                collapseElement.classList.add('show');
            } else {
                // Utiliser Bootstrap Collapse pour cacher les options
                new bootstrap.Collapse(collapseElement, {
                    toggle: true
                });
                accordionButton.classList.add('collapsed');
                collapseElement.classList.remove('show');
                // Et désactiver les sous-options
                document.getElementById('optionKNN-1').checked = false;
                document.getElementById('n_neighbors-input').disabled = true;
                document.getElementById('optionKNN-2').checked = false;
                document.getElementById('weights-select').disabled = true;
                document.getElementById('optionKNN-3').checked = false;
                document.getElementById('metric-select').disabled = true;
            }
        });


        // Lorsque le champ de saisie perd le focus, effectuer une validation
        document.getElementById('criterion-min_samples_leaf-input').addEventListener('blur', function () {
            var value = parseInt(this.value);
            if (isNaN(value) || value < 1 || value > 100) {
                if (this.value.trim() !== '') {
                    var confirmation = confirm('Veuillez saisir un entier positif entre 1 et 100 pour max_depth.');
                    if (confirmation) {
                        this.value = ''; // Effacer la saisie
                        this.focus(); // Mettre le champ de saisie en surbrillance

                    }
                }
            }
        });

        

        // Fonction pour définir la valeur du sélecteur dans le champ de saisie correspondant
        function updateInputFromSelect(selectId, inputId) {
            var select = document.getElementById(selectId);
            var input = document.getElementById(inputId);
            select.addEventListener('change', function () {
                input.value = this.value;
            });

            // Générer les options
            for (var i = 1; i <= 100; i++) {
                var option = document.createElement('option');
                option.value = i;
                option.text = i;
                select.appendChild(option);
            }

            // Ajouter un écouteur d'événements pour mettre à jour la valeur du champ de saisie lorsque l'option du sélecteur change
            select.addEventListener('change', function () {
                var selectedValue = parseInt(this.value);
                input.value = selectedValue;

            });
        }
        // Appeler la fonction pour ajouter la même fonctionnalité à chaque champ de saisie
        updateInputFromSelect('criterion-n_estimators-select', 'criterion-n_estimators-input');
        updateInputFromSelect('criterion-max_depth-select', 'criterion-max_depth-input');
        updateInputFromSelect('criterion-min_samples_leaf-select', 'criterion-min_samples_leaf-input');


        $(document).ready(function () {
            // Activer les sous-options lorsque l'option principale est sélectionnée
            $(' #mainOption2').change(function () {
                var isChecked = $(this).is(':checked');
                var accordionItem = $(this).closest('.accordion-item');

                // Activer ou désactiver les sous-options
                accordionItem.find('input[type=checkbox], input[type=text]').prop('disabled', !isChecked);

                // Déplier ou replier les sous-options
                var collapseTarget = accordionItem.find('.accordion-collapse');
                if (isChecked) {
                    collapseTarget.collapse('show');
                } else {
                    collapseTarget.collapse('hide');
                }
            });

            // Lorsque le bouton est cliqué, effectuer l'action suivante
            $('#nextButton').click(function () {
                // Obtenir les options sélectionnées
                var selectedOptions = [];
                $('input[type=checkbox]:checked').each(function () {
                    selectedOptions.push($(this).val());
                });

                // Obtenir les valeurs personnalisées saisies
                $('input[type=text]').each(function () {
                    var inputValue = $(this).val();
                    if (inputValue !== "" && /^\d+$/.test(inputValue)) {
                        selectedOptions.push(inputValue);
                    }
                });

                // Afficher les options sélectionnées dans la console
                console.log(selectedOptions);

                // Vous pouvez écrire du code ici pour effectuer l'action suivante, comme envoyer les options pour traitement côté serveur, etc.
            });
        });

        // Ajouter un écouteur d'événements pour le clic sur le bouton
        document.getElementById("suivant-btn").addEventListener("click", function (event) {
            var n_estimators = document.getElementById('criterion-n_estimators-input').value.trim();

            if (n_estimators === '') {
                // Affiche une alerte indiquant que le champ ne peut pas être vide
                alert('Ce champ ne peut pas être laissé vide. Veuillez saisir une valeur.');
            } else { 
            // Empêcher le comportement de soumission par défaut du formulaire
            event.preventDefault();
            // Exécuter la logique de redirection de la page, ici utiliser window.location.href pour rediriger vers Home/Select
            window.location.href = "@Url.Action("Image", "Home")";
            }
        });

        document.getElementById('mainOptionKNN').addEventListener('change', function () {
            var inputs = document.querySelectorAll('#collapseOptionKNN .form-check-input');
            inputs.forEach(input => input.disabled = !this.checked);
        });

        
        //Savoir si le bouton de la methode analytique est cochee
        var checkbox = document.getElementById('mainOption1');

        // Vérifie si la case à cocher est cochée
        if (checkbox.checked) {
            console.log('La case à cocher est cochée.');
        } else {
            console.log('La case à cocher n\'est pas cochée.');
        }
    </script>
}
   
  